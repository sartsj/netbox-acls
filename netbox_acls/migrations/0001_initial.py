# Generated by Django 4.2.5 on 2023-09-18 22:05

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import utilities.json


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('extras', '0098_webhook_custom_field_data_webhook_tags'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=500, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9-_]+$', 'Only alphanumeric, hyphens, and underscores characters are allowed.')])),
                ('assigned_object_id', models.PositiveBigIntegerField()),
                ('type', models.CharField(max_length=30)),
                ('comments', models.TextField(blank=True)),
                ('assigned_object_type', models.ForeignKey(limit_choices_to=models.Q(models.Q(('app_label', 'dcim'), ('model', 'devicerole'))), on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'Access List',
                'verbose_name_plural': 'Access Lists',
                'ordering': ['assigned_object_type', 'assigned_object_id', 'name'],
                'unique_together': {('assigned_object_type', 'assigned_object_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='ACLInterfaceAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('assigned_object_id', models.PositiveBigIntegerField()),
                ('comments', models.TextField(blank=True)),
                ('access_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='netbox_acls.accesslist')),
                ('assigned_object_type', models.ForeignKey(limit_choices_to=models.Q(models.Q(models.Q(('app_label', 'dcim'), ('model', 'interface')), models.Q(('app_label', 'virtualization'), ('model', 'vminterface')), _connector='OR')), on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'ACL Interface Assignment',
                'verbose_name_plural': 'ACL Interface Assignments',
                'ordering': ['assigned_object_type', 'assigned_object_id', 'access_list'],
                'unique_together': {('assigned_object_type', 'assigned_object_id', 'access_list')},
            },
        ),
        migrations.CreateModel(
            name='ACLIngressRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('description', models.CharField(blank=True, max_length=500)),
                ('destination_ports', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None)),
                ('protocol', models.CharField(blank=True, max_length=30, null=True)),
                ('source_prefix', models.CharField(blank=True, max_length=100, null=True)),
                ('access_list', models.ForeignKey(limit_choices_to={'type': 'ingress'}, on_delete=django.db.models.deletion.CASCADE, related_name='aclingressrules', to='netbox_acls.accesslist')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'ACL Ingress Rule',
                'verbose_name_plural': 'ACL Ingress Rules',
                'ordering': ['access_list', 'destination_ports', 'protocol'],
                'abstract': False,
                'unique_together': {('access_list', 'destination_ports', 'protocol')},
            },
        ),
        migrations.CreateModel(
            name='ACLEgressRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('description', models.CharField(blank=True, max_length=500)),
                ('destination_ports', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None)),
                ('protocol', models.CharField(blank=True, max_length=30, null=True)),
                ('destination_prefix', models.CharField(blank=True, max_length=100, null=True)),
                ('access_list', models.ForeignKey(limit_choices_to={'type': 'egress'}, on_delete=django.db.models.deletion.CASCADE, related_name='aclegressrules', to='netbox_acls.accesslist')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'verbose_name': 'ACL Egress Rule',
                'verbose_name_plural': 'ACL Egress Rules',
                'ordering': ['access_list', 'destination_ports', 'protocol'],
                'abstract': False,
                'unique_together': {('access_list', 'destination_ports', 'protocol')},
            },
        ),
    ]
